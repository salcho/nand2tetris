// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    	// Decode the instruction
    	And(a=true, b=instruction[15], out=isC);
	Not(in=isC, out=isA);
	And(a=isC, b=instruction[12], out=a);
	And(a=isC, b=instruction[11], out=c1);
	And(a=isC, b=instruction[10], out=c2);
	And(a=isC, b=instruction[9], out=c3);
	And(a=isC, b=instruction[8], out=c4);
	And(a=isC, b=instruction[7], out=c5);
	And(a=isC, b=instruction[6], out=c6);
	And(a=isC, b=instruction[5], out=aDest);
	And(a=isC, b=instruction[4], out=dLoad);
	And(a=isC, b=instruction[3], out=writeM);
	And(a=isC, b=instruction[2], out=lt);
	And(a=isC, b=instruction[1], out=eq);
	And(a=isC, b=instruction[0], out=gt);

	Mux16(a=instruction, b=alu, sel=isC, out=ins);
	Or(a=isA, b=aDest, out=aLoad);
	ARegister(in=ins, load=aLoad, out=areg);
	LSB(in=areg, out=addressM);

	ALU(x=dreg, y=aOrM, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=alu, out=outM, zr=zr, ng=ng);
	// Figure out jump
	Or(a=ng, b=zr, out=notPos);
	Not(in=notPos, out=pos);
	And(a=ng, b=lt, out=isNegative);
	And(a=zr, b=eq, out=isZero);
	And(a=pos, b=gt, out=isPositive);
	Or(a=isNegative, b=isZero, out=firstJmp);
	Or(a=firstJmp, b=isPositive, out=jmp);
	Not(in=jmp, out=noJmp);

	Mux16(a=areg, b=inM, sel=a, out=aOrM);
	DRegister(in=alu, load=dLoad, out=dreg);
	PC(in=areg, load=jmp, inc=noJmp, reset=reset, out=fullPC);
	LSB(in=fullPC, out=pc);
}
